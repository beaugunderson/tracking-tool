type Doctor = {
  text: string;
  value?: string;
  inactive?: boolean;
};

export const RAW_DOCTORS: readonly Doctor[] = [
  { text: 'Agena, Joanna' },
  { text: 'Alassas, Mohamed' },
  { text: 'Aye, Ralph' },
  { text: 'Barnett, Todd' },
  { text: 'Barr, Darlene' },
  { text: 'Bastawrous, Amir' },
  { text: 'Batchelder, Ami' },
  { text: 'Benkers, Tara', inactive: true },
  { text: 'Bensinger, William' },
  { text: 'Bhark, Sandy' },
  { text: 'Blanshan, Stephanie' },
  { text: 'Bograd, Adam' },
  { text: 'BonDurant, Amy' },
  { text: 'Brower, Jessica' },
  { text: 'Brown, Thomas', inactive: true },
  { text: 'Buchanan, Claire' },
  { text: 'Buscariollo, Daniela', value: 'Buscariolo, Daniela' },
  { text: 'Chen, Grace' },
  { text: 'Clay, Martha', inactive: true },
  { text: 'Cobbs, Charles' },
  { text: 'Crown, Angelina' },
  { text: 'Dong, David' },
  { text: 'Douglas, Robert' },
  { text: 'Drescher, Charles' },
  { text: 'Eden, Michelle' },
  { text: 'Egan, Dan' },
  { text: 'Ellis, Erin' },
  { text: 'Eulau, Stephen' },
  { text: 'Farivar, Alexander' },
  { text: 'Fer, Mehmet', inactive: true },
  { text: 'Gensert, Emma', value: 'Thomas, Emma', inactive: true },
  { text: 'Gilbert, Christopher' },
  { text: 'Glennie, Sonia' },
  { text: 'Gold, Philip' },
  { text: 'Goldberg, Sheldon' },
  { text: 'Golden, Joseph' },
  { text: 'Goldie, Christina (Christa)' },
  { text: 'Gorden, Jed' },
  { text: 'Griffin, John' },
  { text: 'Groves, Kashina' },
  { text: 'Han, Michelle' },
  { text: 'Hawkins, Melinda' },
  { text: 'Hegerova, Livia' },
  { text: 'Hendershott, Karen', inactive: true },
  { text: 'Henson, John' },
  { text: 'Herbert Aliea' },
  { text: 'Holdread, Heather' },
  { text: 'Johnston, Eileen' },
  { text: 'Kaplan, Henry (Hank)', inactive: true },
  { text: 'Kim, Namou' },
  { text: 'Kim, Patricia' },
  { text: 'Kratz, Rodney' },
  { text: 'Landis, Daniel' },
  { text: 'Lazarus, Laura' },
  { text: 'Lee, Christine' },
  { text: 'Lee, Douglas' },
  { text: 'Lee, Ellyn' },
  { text: 'Lindsley, Skylar' },
  { text: 'Loiselle, Christopher' },
  { text: 'Lopez, Jay' },
  { text: 'Lott, Jenny' },
  { text: 'Louie, Brian' },
  { text: 'Lynn, Cecilia' },
  { text: 'Marrs, Jessie' },
  { text: 'Mawad, Raya' },
  { text: 'McConnell, Christina' },
  { text: 'McCormick, Kinsey' },
  { text: 'Mehta, Vivek' },
  { text: 'Meier, Robert' },
  { text: 'Menon, Raman' },
  { text: 'Montgomery, Susan' },
  { text: 'Moore, David', inactive: true },
  { text: 'Morgan, Amy' },
  { text: 'Morris, Astrid' },
  { text: 'Muggoch, Nancy', inactive: true },
  { text: 'Musa, Fernanda' },
  { text: 'Ong, Evan' },
  { text: 'Pagel, John' },
  { text: 'Paget, Ellen' },
  { text: 'Palmer, Martin' },
  { text: 'Park, Min' },
  { text: 'Patel, Krish' },
  { text: 'Paulson, Kelly' },
  { text: 'Peters, William' },
  { text: 'Peterson, K.L.' },
  { text: 'Pollock, Darren' },
  { text: 'Press, Joshua' },
  { text: 'Ranker, Elizabeth' },
  { text: 'Rinn, Kristine', inactive: true },
  { text: 'Robin, Jeffrey', inactive: true },
  { text: 'Ryu, Lio' },
  { text: 'Shah, Chirag' },
  { text: 'Shango, Maryann', inactive: true },
  { text: 'Sharma, Nancy' },
  { text: 'Simmons, Forrest', inactive: true },
  { text: 'Sniezek, Joseph' },
  { text: 'Spiegel, James' },
  { text: 'Subramaniam, Somasundaram (Soma)' },
  { text: 'Takamiya, Robert' },
  { text: 'Tierney, Shannon', inactive: true },
  { text: 'Tiu, Maitram Christine', inactive: true },
  { text: 'Vallieres, Eric' },
  { text: 'Vaynshteyn, Rostislav' },
  { text: 'Veljovich, Dan' },
  { text: 'Vermeulen, Sandra' },
  { text: 'Vyas, Shilpa' },
  { text: 'Wahl, Tanya' },
  { text: 'Walsh, Nathan' },
  { text: 'Ward, Jeffery' },
  { text: 'West, Howard (Jack)', inactive: true },
  { text: 'Wulff, Jennifer' },
  { text: 'Xie, Bin' },
  { text: 'Yan, Fengting' },
  { text: 'Zhao, Song' },
  { text: 'Zucker, David' },
  { text: 'Unassigned' },
] as const;

export const DOCTORS: Doctor[] = RAW_DOCTORS.map((doctor) => ({
  ...doctor,
  value: doctor.value || doctor.text,
}));

export function isInactive(value: string) {
  if (DOCTORS.find((doctor) => doctor.value === value && doctor.inactive)) {
    return true;
  }

  return false;
}
